# Importar Bibliotecas Necessárias
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import roc_curve, auc
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC

# Carregar e Preparar os Dados
from google.colab import drive

# Conectar ao Google Drive
drive.mount('/content/drive')

# Importar o Arquivo de Vinho
file_path = "/content/drive/My Drive/Colab Notebooks/winequalityN.csv"
wine_data = pd.read_csv(file_path)

# Filtrar apenas vinhos brancos e criar cópia para evitar Warning
white_wine = wine_data[wine_data["type"] == "white"].copy()

# Criar a variável "opinion"
white_wine.loc[:, "opinion"] = (white_wine["quality"] > 5).astype(int)

# Remover colunas desnecessárias
white_wine.drop(columns=["quality", "type"], inplace=True)

# Tratar valores ausentes
white_wine.fillna(white_wine.median(numeric_only=True), inplace=True)

# Definir variáveis preditoras (X) e alvo (y)
X = white_wine.drop(columns=["opinion"])
y = white_wine["opinion"]

# Normalizar os dados
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)


# Criar validação cruzada estratificada com k=10
kf = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)

# Modelos para comparação
models = {
    "Regressão Logística": LogisticRegression(),
    "Árvore de Decisão": DecisionTreeClassifier(),
    "SVM": SVC(probability=True)  # Probabilidade ativada para curva ROC
}

# Plotando a curva ROC média para cada modelo
plt.figure(figsize=(10, 6))

for model_name, model in models.items():
    tprs = []
    mean_fpr = np.linspace(0, 1, 100)
    
    for train_idx, test_idx in kf.split(X_scaled, y):
        X_train, X_test = X_scaled[train_idx], X_scaled[test_idx]
        y_train, y_test = y[train_idx], y[test_idx]
        
        # Treinar modelo
        model.fit(X_train, y_train)
        y_prob = model.predict_proba(X_test)[:, 1]  # Probabilidade positiva
        
        # Calcular curva ROC
        fpr, tpr, _ = roc_curve(y_test, y_prob)
        tprs.append(np.interp(mean_fpr, fpr, tpr))
    
    # Média e desvio da curva ROC
    mean_tpr = np.mean(tprs, axis=0)
    roc_auc = auc(mean_fpr, mean_tpr)
    
    # Plotar curva ROC média
    plt.plot(mean_fpr, mean_tpr, label=f"{model_name} (AUC = {roc_auc:.2f})")

# Configurações do gráfico
plt.plot([0, 1], [0, 1], linestyle="--", color="gray")  # Linha aleatória
plt.xlabel("Taxa de Falsos Positivos (FPR)")
plt.ylabel("Taxa de Verdadeiros Positivos (TPR)")
plt.title("Curva ROC Média dos Modelos")
plt.legend()
plt.show()
